<?php
/**
 * A simple and powerful templating engine that does not restrict you from using PHP code in your views.
 * In fact, all views are compiled into PHP code.
 *
 * @package Advandz
 * @subpackage Advandz.lib
 * @copyright Copyright (c) 2012-2017 CyanDark, Inc. All Rights Reserved.
 * @license https://opensource.org/licenses/MIT The MIT License (MIT)
 * @author The Advandz Team <team@advandz.com>
 */
class Knife extends View {
	/**
	 * @var string The template code
	 */
	public $template;

	/**
	 * Compiles the Knife template to PHP code
	 *
	 * @param string $file The file used as our view
	 * @return string HTML generated by the view
	 * @throws Exception
	 */
	public function compile($file = null) {
		if (!file_exists($file))
			throw new Exception("Files does not exist: " . $file);

		$this->template = file_get_contents($file);

		if(!$this->template)
			throw new Exception("File is not a valid view: " . $file);

		// Clean PHP tags
		$this->clean();

		// Parse tags
		$this->parse();

		return $this->template;
	}

	/**
	 * Parse all the tags and convert them into PHP code
	 */
	private function parse() {
		// Parse PHP tag
		$this->parsePhp();

		// Parse if tag
		$this->parseIf();

		// Parse foreach tag
		$this->parseForeach();

		// Parse lang tag
		$this->parseLang();

		// Parse view variables
		$this->parseViewVars();

		// Parse print tag
		$this->parsePrint();
	}

	/**
	 * Parse the "php" tag, that allow you run PHP code in your views
	 */
	private function parsePhp() {
		$this->replaceTag("{{php}}", '<?php ');
		$this->replaceTag("{{/php}}", ' ?>');
	}

	/**
	 * Parse the "if" tag
	 */
	private function parseIf() {
		preg_replace_callback('/\\{\\{([^{}]+)\}\\}/', function($matches) {
			$args = explode(" ", $matches[1], 2);
			switch($args[0]) {
				case "if":
					$this->replaceTag($matches[0], '<?php if(' . $args[1] . ') { ?>');
					break;
				case "elseif":
					$this->replaceTag($matches[0], '<?php } elseif(' . $args[1] . ') { ?>');
					break;
			}
		}, $this->template);

		$this->replaceTag("{{else}}", '<?php } else { ?>');
		$this->replaceTag("{{/if}}", '<?php } ?>');
	}

	/**
	 * Parse the "foreach" tag
	 */
	private function parseForeach() {
		preg_replace_callback('/\\{\\{([^{}]+)\}\\}/', function($matches) {
			$args = explode(" ", $matches[1], 2);
			if($args[0] == "foreach")
				$this->replaceTag($matches[0], '<?php foreach(' . $args[1] . ') { ?>');
		}, $this->template);

		$this->template = str_replace("{{/foreach}}", '} ?>', $this->template);
	}

	/**
	 * Parse the "lang" tag
	 */
	private function parseLang() {
		preg_replace_callback('/\\{\\{([^{}]+)\}\\}/', function($matches) {
			$args = explode(" ", $matches[1], 2);
			if($args[0] == "lang")
				$this->replaceTag($matches[0], '<?php $this->_(' . $args[1] . '); ?>');
		}, $this->template);
	}

	/**
	 * Parse the view variables inside $this
	 */
	private function parseViewVars() {
		preg_replace_callback('/\\{\\{([^{}]+)\}\\}/', function($matches) {
			$args = explode(" ", $matches[1], 2);
			if($args[0] == "@")
				$this->replaceTag($matches[0], '<?= $this->Html->safe($this->' . $args[1] . '); ?>');
		}, $this->template);
	}

	/**
	 * Parse the variables
	 */
	private function parsePrint() {
		// With XSS filtering
		$this->replaceTag("{[\"", '<?= $this->Html->safe($');
		$this->replaceTag("\"]}", '); ?>');

		// Without XSS filtering
		$this->replaceTag("{![\"", '<?= $this->Html->ifSet($');
	}

	/**
	 * Clean the template from PHP tags
	 */
	private function clean() {
		$this->replaceTag("<?php", "&lt;?php");
		$this->replaceTag("?>", "?&gt;");
	}

	/**
	 * Replace a tag in the template for a PHP code
	 *
	 * @param string $tag The tag to be replaced
	 * @param string $code The PHP code
	 */
	private function replaceTag($tag, $code) {
		$this->template = str_replace($tag, $code, $this->template);
	}
}
?>